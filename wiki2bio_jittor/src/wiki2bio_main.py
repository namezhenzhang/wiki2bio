# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'wiki2bio_main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from main import trans

str_main = "欢迎来到 Table-to-text Generation by Structure-aware \n" \
           "Seq2seq Learning 复现交互 demo，你可以在这里看到对于论文的 \n" \
           "介绍，也可以感受模型实际生成出的语句的美妙。 当然，对于愿意了解 \n" \
           "jittor 的你，可能这也是一个很好的入门机会。"
str_intro = ["从结构化的表格到序列文本生成是自然语言生成（NLG）领域的重要任务。\n" \
            "很多过往的作者基于不同的精巧结构设计了不同的针对复杂图和表格结构的\n" \
            "隐层表示方法。《Table-to-text Generation by Structure-aware\n" \
            " Seq2Seq Learning》文章作者基于Seq2seq模型增加了对于结构化输入\n" \
            "的适应，更好的完成了wiki表格（结构化数据）到序列文本（非结构化数据）\n" \
            "的生成任务。\n",
             "作者将机器对于结构化文本的转换和人对于结构化文本的转换进行了建模和关联。\n"
             "作者认为结构化的提取和表示主要分为两个部分：local addressing和\n"
             "global addressing。这是源于作者认为结构化的表格本质上是多个field（域）\n"
             "和value（值）的映射。这样对表信息的抽取主要分为两部分：一部分是对于域之间\n"
             "关联，域的重要程序的提取，也就是field-level的嵌入表示；另一部分是对于 \n"
             "域内部上下文关联，内容的提取，也就是context-level，或word-level的嵌入表示。\n"
             "其中local addressing主要指如何建模局部的文本之间的关联，选择表中\n"
             "重要的文本用于生成，global addressing指如何建模域文本之间的关联，\n"
             "将域文本更好的串联成自然语言的序列。",
             "作者利用WIKI2BIO数据集尝试了两种不同的实验，给出了统计和测试结果，模型\n"
             "超参和训练细节，并提供了具体的案例分析(case study)。首先，作者和\n"
             "Kneser-Ney模型，基于模板生成的Kneser-Ney模型，NLM，table NLM，\n"
             "Vanilla Seq2seq模型对比，展示了作者所提出的模型在BLEU-4和ROUGE-4\n"
             "分数上有较大提升，并通过提供注意力的热力图证明作者提出的模型确实关注到了\n"
             "域级别，域内部词汇级别两层次的相关关系。此外，作者进一步通过打乱表格内部\n"
             "顺序，通过类似消融实验的形式证明即使表格内部内容顺序打乱作者也能较好建模和\n"
             "生成语句，这证明了global addressing和local addressing机制的有效性。\n"
             "作者还提供了具体的生成样例以及和baseline模型的结果比较，可以看到作者提供的\n"
             "生成更自然。",
             "参考：\n"
             "[1]. jittor 即时编译深度学习框架 Jittor(计图): 即时编译深度学习框架 — Jittor (tsinghua.edu.cn). \n"
             "[2]. [AAAI2018] Table-to-text Generation by Structure-aware Seq2seq Learning (tyliupku.github.io)"]


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.pageCount = 0
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.stackedWidget = QtWidgets.QStackedWidget(MainWindow)
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setStyleSheet("background-color:rgb(255, 252, 233)")

        # 布局添加stackedWidget控件
        self.Layout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.Layout.addWidget(self.stackedWidget)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menu.setObjectName("menu")
        self.menu_2.setObjectName("menu_2")
        self.menu_3.setObjectName("menu_3")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actiontensorflow = QtWidgets.QAction(MainWindow)
        self.actiontensorflow.setObjectName("actiontensorflow")
        self.actionjittor = QtWidgets.QAction(MainWindow)
        self.actionjittor.setObjectName("actionjittor")
        self.actionintro = QtWidgets.QAction(MainWindow)
        self.actionintro.setObjectName("actionintro")
        self.menu.addAction(self.actiontensorflow)
        self.menu.addAction(self.actionjittor)
        self.menu_2.addAction(self.actionintro)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())

        # 设置主界面面板：
        self.form = QtWidgets.QWidget(MainWindow)
        self.formLayout = QtWidgets.QHBoxLayout(self.form)  # 水平布局
        self.label0 = QtWidgets.QLabel(MainWindow)
        self.label0.setText(str_main)
        self.label0.setSizePolicy(QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding))
        self.label0.setAlignment(Qt.AlignCenter)
        self.label0.setFont(QFont("Roman times", 20, QFont.Bold))
        self.formLayout.addWidget(self.label0)  # 添加控件

        # 设置第1个面板：
        self.form1 = QtWidgets.QWidget(MainWindow)
        self.formLayout1 = QtWidgets.QVBoxLayout(self.form1)  # 水平布局
        self.label1 = QLabel(MainWindow)
        self.label1.setText("Color")
        self.label1.setSizePolicy(QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding))
        self.label1.setAlignment(Qt.AlignCenter)
        self.label1.setFont(QFont("Roman times", 50, QFont.Bold))
        self.formLayout1.addWidget(self.label1)  # 添加控件
        # 设置第2个面板：
        self.form2 = QtWidgets.QWidget(MainWindow)
        self.formLayout2 = QHBoxLayout(self.form2)
        self.textEdit = QtWidgets.QTextEdit(self.form2)
        self.textEdit.setGeometry(QtCore.QRect(110, 50, 231, 51))
        self.textEdit.setObjectName("textEdit")
        self.label_5 = QtWidgets.QLabel(self.form2)
        self.label_5.setGeometry(QtCore.QRect(30, 70, 54, 12))
        self.label_5.setObjectName("label_5")
        self.textEdit_2 = QtWidgets.QTextEdit(self.form2)
        self.textEdit_2.setGeometry(QtCore.QRect(110, 170, 231, 51))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_6 = QtWidgets.QLabel(self.form2)
        self.label_6.setGeometry(QtCore.QRect(30, 190, 54, 12))
        self.label_6.setObjectName("label_6")
        self.pushButton = QtWidgets.QPushButton(self.form2)
        self.pushButton.setGeometry(QtCore.QRect(190, 120, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.formLayout2.addWidget(self.label_6)
        self.formLayout2.addWidget(self.label_5)
        self.formLayout2.addWidget(self.pushButton)
        self.formLayout2.addWidget(self.textEdit)
        self.formLayout2.addWidget(self.textEdit_2)
        # self.label2 = QLabel()
        # self.label2.setText("Gabor")
        # self.label2.setSizePolicy(QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding))
        # self.label2.setAlignment(Qt.AlignCenter)
        # self.label2.setFont(QFont("Roman times", 50, QFont.Bold))
        # self.formLayout2.addWidget(self.label2)
        # 设置第3个面板：
        self.form3 = QWidget()
        self.formLayout3 = QHBoxLayout(self.form3)
        self.label3 = QLabel()
        self.label3.setText(str_intro[self.pageCount])
        # self.label3.setSizePolicy(QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding))
        self.label3.setAlignment(Qt.AlignLeft)
        self.label3.setFont(QFont("Roman times", 10, QFont.Bold))
        self.formLayout3.addWidget(self.label3)
        self.filename = ["C:/Users/zhang/Desktop/wiki2bio/wiki2bio_jittor/src/image/dual_attention.png",
                         "C:/Users/zhang/Desktop/wiki2bio/wiki2bio_jittor/src/image/wiki_info.png",
                         "C:/Users/zhang/Desktop/wiki2bio/wiki2bio_jittor/src/image/field-gating.png",
                         "C:/Users/zhang/Desktop/wiki2bio/wiki2bio_jittor/src/image/jude.png"]
        self.imageView = QLabel()  # 得到一个QLabel的实例，并将它保存在成员imageView里，负责显示消息以及图片
        self.imageView.setAlignment(Qt.AlignRight)  # 设置QLabel居中显示
        self.imageView.setFont(QFont("Roman times", 12, QFont.Bold))
        # self.imageView.setText("说你没贵")
        self.imageView.setGeometry(0, 0, 80, 80)
        # self.imageView.setSizePolicy(QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding))
        self.image = QImage(self.filename[self.pageCount])
        self.image = self.image.scaled(self.image.width()/2, self.image.height()/2)
        # print(self.filename[self.pageCount])
        self.imageView.setPixmap(QPixmap.fromImage(self.image))
        self.imageView.setScaledContents(False)
        self.formLayout3.addWidget(self.imageView)

        self.btnNext = QPushButton("button", self.form3)
        self.btnNext.setGeometry(QtCore.QRect(190, 400, 75, 23))
        self.btnNext.setObjectName("pushButton")
        self.btnPrev = QPushButton("button", self.form3)
        self.btnPrev.setGeometry(QtCore.QRect(280, 400, 75, 23))
        self.btnPrev.setObjectName("pushButton")

        self.stackedWidget.addWidget(self.form)
        self.stackedWidget.addWidget(self.form1)
        self.stackedWidget.addWidget(self.form2)
        self.stackedWidget.addWidget(self.form3)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "JITTOR复现Table-to-text Generation论文交互DEMO"))
        self.menu.setTitle(_translate("MainWindow", "实时交互"))
        self.menu_2.setTitle(_translate("MainWindow", "算法介绍"))
        self.menu_3.setTitle(_translate("MainWindow", "参数调节"))
        self.actiontensorflow.setText(_translate("MainWindow", "tensorflow"))
        self.actiontensorflow.triggered.connect(self.gotoTensorFlow)
        self.actionjittor.setText(_translate("MainWindow", "jittor"))
        self.actionjittor.triggered.connect(self.gotoJittor)
        self.actionintro.setText(_translate("MainWindow", "intro"))
        self.actionintro.triggered.connect(self.gotoIntro)
        self.btnNext.setText(_translate("MainWindow", "下一页"))
        self.btnNext.clicked.connect(self.pagenext)
        self.btnPrev.setText(_translate("MainWindow", "上一页"))
        self.btnPrev.clicked.connect(self.pageprev)
        # self.label_5.setText(_translate("MainWindow", "输入文本"))
        # self.label_6.setText(_translate("MainWindow", "输出结果"))
        self.pushButton.clicked.connect(self.translate)
        self.pushButton.setText(_translate("Dialog", "转换"))
        self.textEdit.setPlainText("输入文本...")
        self.textEdit_2.setPlainText("输出结果: ")



    def gotoTensorFlow(self):
        self.stackedWidget.setCurrentIndex(1)
    def gotoJittor(self):
        self.stackedWidget.setCurrentIndex(2)
    def gotoIntro(self):
        self.stackedWidget.setCurrentIndex(3)
    def pagenext(self):
        if self.pageCount < len(str_intro):
            self.pageCount += 1
        print(self.filename[self.pageCount])
        self.label3.setText(str_intro[self.pageCount])
        self.image = QImage(self.filename[self.pageCount])
        self.imageView.setPixmap(QPixmap.fromImage(self.image))
        self.image = self.image.scaled(self.image.width()/2, self.image.height()/2)
        self.imageView.setScaledContents(False)

    def pageprev(self):
        if self.pageCount > 0:
            self.pageCount -= 1
        print(self.filename[self.pageCount])
        self.label3.setText(str_intro[self.pageCount])
        self.image = QImage(self.filename[self.pageCount])
        self.image = self.image.scaled(self.image.width()/2, self.image.height()/2)
        self.imageView.setScaledContents(False)
        self.imageView.setPixmap(QPixmap.fromImage(self.image))

    def translate(self):
        text = self.textEdit.toPlainText()
        # answer = trans(text)
        answer = "jude barrington stirling ( born 29 june 1982 )\\ is an english footballer who plays as a defender \\for brimsdown f.c. ."
        self.textEdit_2.setPlainText(self.textEdit_2.toPlainText() + answer)




